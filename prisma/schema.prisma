// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OtpToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        Role
  subjects    Subject[] @relation("TeacherSubjects")
  memberships Membership[]
  messages    Message[]
  notifications Notification[]
  createdAt   DateTime  @default(now())

  StudentAnswer StudentAnswer[]

  OtpToken OtpToken[]
}

enum Role {
  STUDENT
  TEACHER
}

model Subject {
  id       Int       @id @default(autoincrement())
  title    String
  description String?
  teacher  User      @relation("TeacherSubjects", fields: [teacherId], references: [id])
  teacherId Int
  groups   Group[]
  lessons  Lesson[]
  quizzes  Quiz[]
  conversations Conversation[]
}

model Group {
  id         Int          @id @default(autoincrement())
  name       String
  capacity   Int
  subject    Subject      @relation(fields: [subjectId], references: [id])
  subjectId  Int
  memberships Membership[]
}

model Membership {
  id        Int       @id @default(autoincrement())
  status    Status    @default(PENDING)
  student   User      @relation(fields: [studentId], references: [id])
  studentId Int
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}




model Lesson {
  id        Int      @id @default(autoincrement())
  type      LessonType
  title     String
  url       String
  publicId  String
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
}

enum LessonType {
  PDF
  VIDEO
  DOC
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  mode      QuizMode
  status    String     @default("DRAFT")
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId Int
  questions Question[]
}

enum QuizMode {
  MANUAL
  AI
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  type      String
  options   String[]
  answer    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  answers   StudentAnswer[]
}

model StudentAnswer {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     String
  correct    Boolean
  score      Int
}

model Conversation {
  id        Int      @id @default(autoincrement())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  messages  Message[]
}

model Message {
  id             Int       @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User      @relation(fields: [senderId], references: [id])
  senderId       Int
  content        String
  timestamp      DateTime  @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
