// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OtpToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        Role
  subjects    Subject[] @relation("TeacherSubjects")
  memberships Membership[]
  messages    Message[]
  notifications Notification[]
  createdAt   DateTime  @default(now())

  StudentAnswer StudentAnswer[]

  OtpToken OtpToken[]

  ConversationStudent Conversation[] @relation("StudentConversations")

  ConversationTeacher Conversation[] @relation("TeacherConversations")



  Group Group[]
}

enum Role {
  STUDENT
  TEACHER
}

model Subject {
  id       Int       @id @default(autoincrement())
  title    String
  description String?
  teacher  User      @relation("TeacherSubjects", fields: [teacherId], references: [id])
  teacherId Int
  groups   Group[]
  lessons  Lesson[]
  quizzes  Quiz[]
  conversations Conversation[]
}

model Group {
  id         Int          @id @default(autoincrement())
  name       String
  capacity   Int
  subject    Subject      @relation(fields: [subjectId], references: [id])
  subjectId  Int
  memberships Membership[]

  createdBy User @relation(fields: [createdById] , references: [id])
  createdById Int
  Conversation Conversation[]
}

model Membership {
  id        Int       @id @default(autoincrement())
  status    Status    @default(PENDING)
  student   User      @relation(fields: [studentId], references: [id])
  studentId Int
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}




model Lesson {
  id        Int      @id @default(autoincrement())
  type      LessonType
  title     String
  url       String
  publicId  String
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
}

enum LessonType {
  PDF
  VIDEO
  DOC
}

// model GroupConversation {
//   id        Int            @id @default(autoincrement())
//   group     Group          @relation(fields: [groupId], references: [id])
//   groupId   Int            @unique
//   messages  GroupMessage[]
//   createdAt DateTime       @default(now())
// }

// model GroupMessage {
//   id              Int              @id @default(autoincrement())
//   conversation    GroupConversation @relation(fields: [conversationId], references: [id])
//   conversationId  Int
//   sender          User             @relation(fields: [senderId], references: [id])
//   senderId        Int
//   content         String
//   mediaUrl        String?
//   mediaType       String?
//   deliveredTo     String[]         @default([])
//   readBy          String[]         @default([])
//   createdAt       DateTime         @default(now())
// }

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  mode      QuizMode
  status    String     @default("DRAFT")
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId Int
  questions Question[]
}

enum QuizMode {
  MANUAL
  AI
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  type      String
  options   String[]
  answer    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  answers   StudentAnswer[]
}

model StudentAnswer {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     String
  correct    Boolean
  score      Int
}

model Conversation {
  id          Int       @id @default(autoincrement())
  isGroup     Boolean   @default(false) // determines if it's a group or direct chat
  
  // For direct conversations (isGroup = false)
  student     User?     @relation("StudentConversations", fields: [studentId], references: [id])
  studentId   Int?
  teacher     User?     @relation("TeacherConversations", fields: [teacherId], references: [id])
  teacherId   Int?
  
  // For group conversations (isGroup = true)
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     Int?      @unique
  
  // Common fields
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]

  // Constraints to ensure data integrity
  @@unique([studentId, teacherId]) // ensure one conversation per student-teacher pair
  
  // Custom validation logic needed at application level:
  // - If isGroup = false: studentId and teacherId must be set, groupId must be null
  // - If isGroup = true: groupId must be set, studentId and teacherId must be null
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  content        String
  
  // Enhanced fields for both direct and group messages
  mediaUrl       String?      // for file attachments
  mediaType      String?      // type of media (image, video, document, etc.)
  
  // For group messages - track delivery and read status
  deliveredTo    String[]     @default([]) // array of user IDs who received the message
  readBy         String[]     @default([]) // array of user IDs who read the message
  
  // Timestamps
  timestamp      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  readAt         DateTime?    // for direct messages, single read timestamp
}


model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
